
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, z as onMount, e as element, o as create_component, g as space, h as attr_dev, a as add_location, b as insert_dev, p as mount_component, k as append_dev, m as transition_in, A as add_render_callback, B as create_in_transition, n as transition_out, f as detach_dev, r as destroy_component, C as check_outros, D as group_outros } from './main-133695a0.js';
import Titlebar from './Titlebar-3d8326b8.js';
import Container from './Container-54b868d6.js';
import WorkspacesList from './WorkspacesList-35ce5a61.js';
import Information from './Information-93f05719.js';
import './Item-ec4e2314.js';
import './Plus-9a544b69.js';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}

/* src/pages/index.svelte generated by Svelte v3.32.1 */
const file = "src/pages/index.svelte";

// (16:2) {#if visible}
function create_if_block(ctx) {
	let test;
	let container0;
	let t;
	let container1;
	let test_intro;
	let current;

	container0 = new Container({
			props: {
				title: "Information",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	container1 = new Container({
			props: {
				title: "Workspaces",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			test = element("test");
			create_component(container0.$$.fragment);
			t = space();
			create_component(container1.$$.fragment);
			attr_dev(test, "class", "svelte-1ci4x9e");
			add_location(test, file, 16, 2, 434);
		},
		m: function mount(target, anchor) {
			insert_dev(target, test, anchor);
			mount_component(container0, test, null);
			append_dev(test, t);
			mount_component(container1, test, null);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(container0.$$.fragment, local);
			transition_in(container1.$$.fragment, local);

			if (!test_intro) {
				add_render_callback(() => {
					test_intro = create_in_transition(test, fly, { y: 200, duration: 1400 });
					test_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(container0.$$.fragment, local);
			transition_out(container1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(test);
			destroy_component(container0);
			destroy_component(container1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(16:2) {#if visible}",
		ctx
	});

	return block;
}

// (18:4) <Container  title="Information">
function create_default_slot_1(ctx) {
	let information;
	let current;
	information = new Information({ $$inline: true });

	const block = {
		c: function create() {
			create_component(information.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(information, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(information.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(information.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(information, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(18:4) <Container  title=\\\"Information\\\">",
		ctx
	});

	return block;
}

// (21:4) <Container title="Workspaces">
function create_default_slot(ctx) {
	let workspaceslist;
	let current;
	workspaceslist = new WorkspacesList({ $$inline: true });

	const block = {
		c: function create() {
			create_component(workspaceslist.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(workspaceslist, target, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;
			transition_in(workspaceslist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(workspaceslist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(workspaceslist, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(21:4) <Container title=\\\"Workspaces\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let main;
	let titlebar;
	let t;
	let current;

	titlebar = new Titlebar({
			props: { username: "Kuba" },
			$$inline: true
		});

	let if_block = /*visible*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			main = element("main");
			create_component(titlebar.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			add_location(main, file, 13, 0, 378);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			mount_component(titlebar, main, null);
			append_dev(main, t);
			if (if_block) if_block.m(main, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*visible*/ ctx[0]) {
				if (if_block) {
					if (dirty & /*visible*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(main, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(titlebar.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(titlebar.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(titlebar);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Pages", slots, []);
	let visible = false;

	onMount(() => {
		setTimeout(() => $$invalidate(0, visible = true), 1000);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Pages> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		Titlebar,
		Container,
		WorkspacesList,
		Information,
		fly,
		onMount,
		visible
	});

	$$self.$inject_state = $$props => {
		if ("visible" in $$props) $$invalidate(0, visible = $$props.visible);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [visible];
}

class Pages extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Pages",
			options,
			id: create_fragment.name
		});
	}
}

export default Pages;
//# sourceMappingURL=index-04605469.js.map
