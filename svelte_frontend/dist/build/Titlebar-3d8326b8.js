
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, g as space, t as text, h as attr_dev, a as add_location, b as insert_dev, k as append_dev, l as set_data_dev, q as noop, f as detach_dev } from './main-133695a0.js';

/* src/pages/Titlebar.svelte generated by Svelte v3.32.1 */

const file = "src/pages/Titlebar.svelte";

function create_fragment(ctx) {
	let titlebar;
	let h1;
	let t1;
	let h2;
	let t2;

	const block = {
		c: function create() {
			titlebar = element("titlebar");
			h1 = element("h1");
			h1.textContent = "Tosca";
			t1 = space();
			h2 = element("h2");
			t2 = text(/*username*/ ctx[0]);
			attr_dev(h1, "class", "svelte-x8okd2");
			add_location(h1, file, 4, 2, 63);
			attr_dev(h2, "class", "svelte-x8okd2");
			add_location(h2, file, 5, 2, 80);
			attr_dev(titlebar, "class", "svelte-x8okd2");
			add_location(titlebar, file, 3, 0, 50);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, titlebar, anchor);
			append_dev(titlebar, h1);
			append_dev(titlebar, t1);
			append_dev(titlebar, h2);
			append_dev(h2, t2);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*username*/ 1) set_data_dev(t2, /*username*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(titlebar);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Titlebar", slots, []);
	let { username } = $$props;
	const writable_props = ["username"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Titlebar> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("username" in $$props) $$invalidate(0, username = $$props.username);
	};

	$$self.$capture_state = () => ({ username });

	$$self.$inject_state = $$props => {
		if ("username" in $$props) $$invalidate(0, username = $$props.username);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [username];
}

class Titlebar extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { username: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Titlebar",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*username*/ ctx[0] === undefined && !("username" in props)) {
			console.warn("<Titlebar> was created without expected prop 'username'");
		}
	}

	get username() {
		throw new Error("<Titlebar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set username(value) {
		throw new Error("<Titlebar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Titlebar;
//# sourceMappingURL=Titlebar-3d8326b8.js.map
