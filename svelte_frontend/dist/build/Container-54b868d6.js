
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, c as create_slot, v as validate_slots, e as element, a as add_location, b as insert_dev, f as detach_dev, t as text, g as space, h as attr_dev, j as set_custom_element_data, k as append_dev, l as set_data_dev, u as update_slot, m as transition_in, n as transition_out } from './main-133695a0.js';
import WorkspacesList from './WorkspacesList-35ce5a61.js';
import './Item-ec4e2314.js';
import './Plus-9a544b69.js';

/* src/pages/Container.svelte generated by Svelte v3.32.1 */
const file = "src/pages/Container.svelte";

// (9:8)      
function fallback_block(ctx) {
	let p;

	const block = {
		c: function create() {
			p = element("p");
			p.textContent = "There is nothing to show :(";
			add_location(p, file, 9, 4, 188);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: fallback_block.name,
		type: "fallback",
		source: "(9:8)      ",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let container;
	let container_title;
	let h2;
	let t0;
	let t1;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	const default_slot_or_fallback = default_slot || fallback_block(ctx);

	const block = {
		c: function create() {
			container = element("container");
			container_title = element("container-title");
			h2 = element("h2");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			if (default_slot_or_fallback) default_slot_or_fallback.c();
			attr_dev(h2, "class", "svelte-1979f8z");
			add_location(h2, file, 6, 4, 137);
			set_custom_element_data(container_title, "class", "svelte-1979f8z");
			add_location(container_title, file, 5, 2, 115);
			attr_dev(container, "class", "svelte-1979f8z");
			add_location(container, file, 4, 0, 101);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, container, anchor);
			append_dev(container, container_title);
			append_dev(container_title, h2);
			append_dev(h2, t0);
			append_dev(container, t1);

			if (default_slot_or_fallback) {
				default_slot_or_fallback.m(container, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot_or_fallback, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot_or_fallback, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(container);
			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Container", slots, ['default']);
	let { title } = $$props;
	const writable_props = ["title"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Container> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ WorkspacesList, title });

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, $$scope, slots];
}

class Container extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Container",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*title*/ ctx[0] === undefined && !("title" in props)) {
			console.warn("<Container> was created without expected prop 'title'");
		}
	}

	get title() {
		throw new Error("<Container>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Container>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Container;
//# sourceMappingURL=Container-54b868d6.js.map
